/*
 * Copyright (c) 2013 Dr. Andreas Feldner.
 *
 *     This program is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License along
 *     with this program; if not, write to the Free Software Foundation, Inc.,
 *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Contact information and current version at http://www.flying-snail.de/IPv6Droid
 */

package de.flyingsnail.ipv6droid.android;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.net.VpnService;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;

import de.flyingsnail.ipv6droid.R;
import de.flyingsnail.ipv6droid.ayiya.TicConfiguration;
import de.flyingsnail.ipv6droid.ayiya.TicTunnel;

/**
 * Main activity as generated by Android Studio, plus Code to start the service when user clicks.
 */
public class MainActivity extends Activity {

    private static final String TAG = MainActivity.class.getName();
    private static final int REQUEST_START_VPN = 1;
    private static final int REQUEST_SETTINGS = 2;
    private TextView activity;
    private ProgressBar progress;
    private ImageView status;
    private Button redundantStartButton;
    private ListView tunnelList;
    private SharedPreferences myPreferences;

    /**
     * The Action name for a status broadcast intent.
     */
    public static final String BC_STOP = MainActivity.class.getName() + ".STOP";
    private StatusReceiver statusReceiver;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        myPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        activity = (TextView)findViewById(R.id.statusText);
        progress = (ProgressBar)findViewById(R.id.progressBar);
        status = (ImageView)findViewById(R.id.statusImage);
        redundantStartButton = (Button)findViewById(R.id.redundant_start_button);
        tunnelList = (ListView)findViewById(R.id.tunnelList);

        // setup the intent filter for status broadcasts
        // The filter's action is BROADCAST_ACTION
        IntentFilter statusIntentFilter = new IntentFilter(VpnThread.BC_STATUS);

        if (statusReceiver == null || savedInstanceState != null)
            statusReceiver = new StatusReceiver(savedInstanceState);
        else
            statusReceiver.updateUi();

        // Registers the StatusReceiver and its intent filter
        LocalBroadcastManager.getInstance(this).registerReceiver(statusReceiver,
                statusIntentFilter);

        // check login configuration and start Settings if not yet set.
        if (myPreferences.getString("tic_username", "").isEmpty() ||
                myPreferences.getString("tic_password", "").isEmpty() ||
                myPreferences.getString("tic_host", "").isEmpty()) {
            openSettings();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    /**
     * Start the system-managed setup of VPN
     * @param view supplied by GUI invocation
     */
    public void startVPN (View view) {
        // Start system-managed intent for VPN
        Intent systemVpnIntent = VpnService.prepare(getApplicationContext());
        if (systemVpnIntent != null) {
            startActivityForResult(systemVpnIntent, REQUEST_START_VPN);
        } else {
            onActivityResult (REQUEST_START_VPN, RESULT_OK, null);
        }
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        statusReceiver = new StatusReceiver(savedInstanceState);
    }

    @Override
    protected void onPause() {
        super.onPause();
        TicTunnel tunnel = statusReceiver.getTunnel();
        putTicTunnelToPrefs(tunnel);
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        statusReceiver.saveState(outState);
    }

    /**
     * Start the system-managed setup of VPN
     */
    public void openSettings () {
        // Start system-managed intent for VPN
        Intent settingsIntent = new Intent(this, SettingsActivity.class);
        startActivityForResult(settingsIntent, REQUEST_SETTINGS);
    }

    /**
     * Stop the VPN service/thread.
     */
    public void stopVPN () {
        Intent statusBroadcast = new Intent(BC_STOP);
        // Broadcast locally
        LocalBroadcastManager.getInstance(this).sendBroadcast(statusBroadcast);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case REQUEST_START_VPN:
                if (resultCode == RESULT_OK) {
                    Intent intent = new Intent(this, AyiyaVpnService.class);
                    TicTunnel tunnel = getTicTunnelFromPrefs();

                    intent.putExtra(AyiyaVpnService.EXTRA_CACHED_TUNNEL, tunnel);
                    startService(intent);
                }
                break;
        }
    }

    private TicTunnel getTicTunnelFromPrefs() {
        // read out cached tunnel
        SharedPreferences myLocalPrefs = getPreferences(MODE_PRIVATE);
        String tunnelString = myLocalPrefs.getString("last_tunnel", null);
        TicTunnel tunnel = statusReceiver.getTunnel();
        if (tunnelString != null) {
            try {
                BigInteger serializedTunnel = new BigInteger(tunnelString);
                ByteArrayInputStream is = new ByteArrayInputStream(serializedTunnel.toByteArray());
                ObjectInputStream os = new ObjectInputStream(is);
                tunnel = (TicTunnel)os.readObject();
            } catch (Exception e) {
                Log.e(TAG, "Could not retrieve saved state of TicTunnel", e);
            }
        }
        return tunnel;
    }

    private void putTicTunnelToPrefs(TicTunnel tunnel) {
        if (tunnel == null) {
            return;
        }
        SharedPreferences myPrefs = getPreferences(MODE_PRIVATE);
        ByteArrayOutputStream bs = new ByteArrayOutputStream();
        try {
            ObjectOutputStream os = new ObjectOutputStream(bs);
            os.writeObject(tunnel);
            os.close();
            BigInteger serialized = new BigInteger(bs.toByteArray());
            myPrefs.edit().putString("last_tunnel", String.format("%d", serialized)).commit();
        } catch (IOException e) {
            Log.e(TAG, "Could not write last working tunnel to preferences");
        }
    }



    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_connect:
                startVPN(item.getActionView());
                return true;

            case R.id.action_disconnect:
                stopVPN();
                return true;

            case R.id.action_settings:
                openSettings();
                return true;

            default:
                return false;
        }
    }

    /** Inner class to handle status updates */
    private class StatusReceiver extends BroadcastReceiver {
        private int progress;
        private String activity;
        private VpnThread.Status status;
        private TicTunnel tunnel;
        private boolean tunnelProven = false;
        private TicTunnel lastWorkingTunnel = null;

        public TicTunnel getTunnel() {
            return tunnel;
        }

        private StatusReceiver(Bundle savedState) {
            if (savedState != null && savedState.containsKey(VpnThread.EDATA_STATUS)) {
                status = VpnThread.Status.valueOf(savedState.getString(VpnThread.EDATA_STATUS));
                progress = savedState.getInt(VpnThread.EDATA_PROGRESS);
                activity = savedState.getString(VpnThread.EDATA_ACTIVITY);
                tunnel = (TicTunnel)savedState.getSerializable(VpnThread.EDATA_ACTIVE_TUNNEL);
                updateUi();
            }
        }

        private void saveState(Bundle state) {
            if (status != null)
                state.putString(VpnThread.EDATA_STATUS, status.toString());
            state.putInt(VpnThread.EDATA_PROGRESS, progress);
            if (activity != null)
                state.putString(VpnThread.EDATA_ACTIVITY, activity);
            if (lastWorkingTunnel != null)
                state.putSerializable(VpnThread.EDATA_ACTIVE_TUNNEL, tunnel);
        }

        private class TunnelListAdapter extends ArrayAdapter<TicConfiguration> {
            public TunnelListAdapter(Context context, int textViewResourceId, TicConfiguration[] objects) {
                super(context, textViewResourceId, objects);
            }
        }

        private void updateUi () {
            int imageRes = R.drawable.off;
            switch (status) {
                case Connected:
                    imageRes = R.drawable.transmitting;
                    break;
                case Idle:
                    imageRes = R.drawable.off;
                    break;
                case Connecting:
                    imageRes = R.drawable.pending;
                    break;
                case Disturbed:
                    imageRes = R.drawable.disturbed;
                    break;
            }
            if (status != null)
                MainActivity.this.status.setImageResource(imageRes);
            if (progress > 0) {
                MainActivity.this.progress.setIndeterminate(false);
                MainActivity.this.progress.setProgress(progress);
            } else
                MainActivity.this.progress.setIndeterminate(true);

            if (status == VpnThread.Status.Idle) {
                redundantStartButton.setVisibility(View.VISIBLE);
                MainActivity.this.progress.setVisibility(View.INVISIBLE);
                MainActivity.this.activity.setVisibility(View.INVISIBLE);
            } else {
                redundantStartButton.setVisibility(View.INVISIBLE);
                MainActivity.this.progress.setVisibility(View.VISIBLE);
                MainActivity.this.activity.setVisibility(View.VISIBLE);
            }

            // show activity text
            if (activity != null)
                MainActivity.this.activity.setText(activity);

            // show tunnel information
            // @todo implementation is too cheap - no internationalization, etc. Necessary to generate custom Adapter.
            // @todo extend to an actual list as soon as we support that.
            if (tunnel != null) {
                tunnelList.setVisibility(View.VISIBLE);
                tunnelList.setAdapter(new ArrayAdapter<TicTunnel>(MainActivity.this,
                        R.layout.tunnellist_template, R.id.listEntry,
                        new TicTunnel[]{tunnel})
                );
            } else {
                tunnelList.setVisibility(View.INVISIBLE);
            }
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            status = VpnThread.Status.valueOf(intent.getStringExtra(VpnThread.EDATA_STATUS));
            progress = intent.getIntExtra(VpnThread.EDATA_PROGRESS, -1);
            activity = intent.getStringExtra(VpnThread.EDATA_ACTIVITY);
            tunnel = (TicTunnel)intent.getSerializableExtra(VpnThread.EDATA_ACTIVE_TUNNEL);
            tunnelProven = intent.getBooleanExtra(VpnThread.EDATA_TUNNEL_PROVEN, false);
            if (tunnelProven)
                lastWorkingTunnel = tunnel;
            updateUi();
        }
    }
}
